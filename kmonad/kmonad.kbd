;; modified from `kmonad/keymap/template/apple.kbd`

(defcfg
  input (iokit-name)
  output (kext)
  fallthrough true
)

(defsrc
  esc      f1       f2       f3       f4       f5       f6       f7       f8       f9       f10      f11      f12
  grv      1        2        3        4        5        6        7        8        9        0        -        =        bspc
  tab      q        w        e        r        t        y        u        i        o        p        [        ]        \
  caps     a        s        d        f        g        h        j        k        l        ;        '        ret
  lsft     z        x        c        v        b        n        m        ,        .        /        rsft     up
  fn       lctl     lalt     lmet              spc               rmet     ralt     left     down     rght
)

;; Below, I use `around' to compose `layer-toggle' with `fn' (instead
;; of using `layer-toggle' directly) so that the `fn' keypress
;; actually gets emitted. This matters when using an application that
;; can use `fn' as a modifier (like Emacs).

(defalias 
    fn (around (layer-toggle function) fn)

    ctl_esc (tap-hold-next-release 200 KeyEsc lctl)

    ctl_a (tap-hold-next-release 200 a lctl)
    alt_s (tap-hold-next-release 200 s lalt)
    met_d (tap-hold-next-release 200 d lmet)
    sft_f (tap-hold-next-release 200 f lsft)

    sft_j (tap-hold-next-release 200 j rsft)
    met_k (tap-hold-next-release 200 k rmet)
    alt_l (tap-hold-next-release 200 l lalt)
    ctl_; (tap-hold-next-release 200 ; rctl)

    hyp_c (tap-hold-next-release 200 c C-A-M-S)
    meh_v (tap-hold-next-release 200 v C-A-M)

    meh_m (tap-hold-next-release 200 m C-A-M)
    hyp_, (tap-hold-next-release 200 , C-A-M-S)

    meh_ret (tap-hold-next-release 200 ret C-A-M)
    hyp C-A-M-S

    spc_p1 (tap-hold-next-release 200 spc (layer-toggle priority))
)

;; first defined layer is always the default layer
(deflayer default
  _        brdn     brup     lp       mctl     bldn     blup     prev     pp       next     mute     vold     volu
  _        _        _        _        _        _        _        _        _        _        _        _        _        _
  _        _        _        _        _        _        _        _        _        _        _        bspc     _        _
  @ctl_esc @ctl_a   @alt_s   @met_d   @sft_f   g        h        @sft_j   @met_k   @alt_l   @ctl_;   _        _
  _        _        _        @hyp_c   @meh_v   _        _        @meh_m   @hyp_,   _        _        _        _
  @fn      _        _        _                 @spc_p1           @meh_ret @hyp     _        _        _
)

(deflayer function
  _        f1       f2       f3       f4       f5       f6       f7       f8       f9       f10      f11      f12
  _        _        _        _        _        _        _        _        _        _        _        _        _        _
  _        _        _        _        _        _        _        _        _        _        _        _        _        _
  _        _        _        _        _        _        _        _        _        _        _        _        _
  _        _        _        _        _        _        _        _        _        _        _        _        _
  _        _        _        _                 _                 _        _        _        _        _
)

(deflayer priority
  _        _        _        _        _        _        _        _        _        _        _        _        _
  _        f1       f2       f3       f4       f5       f6       f7       f8       f9       f10      f11      f12      _
  _        _        pgup     home     end      pgdn     _        _        S-9      S-0      _        _        _        _
  _        `        left     up       down     rght     _        [        S-[      S-]      ]        _        _
  _        ~        |        \        -        S--      +        =        <        >        _        _        _
  _        _        _        _                 _                 _        _        _        _        _
)
